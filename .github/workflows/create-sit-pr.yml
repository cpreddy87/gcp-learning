# .github/workflows/create-sit-pr.yml

# .github/workflows/create-sit-pr.yml

name: Promote Dev to SIT PR

on:
  push:
    branches:
      - dev # Trigger this workflow whenever code is pushed to the 'dev' branch

jobs:
  create-pull-request:
    runs-on: ubuntu-latest
    # Permissions for the GITHUB_TOKEN
    # 'contents: write' is crucial for creating and pushing the new 'sit' branch
    permissions:
      contents: write
      pull-requests: write # Essential for creating and managing pull requests
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4
        with:
          # This token is necessary for 'actions/checkout' to pull code
          # and also implicitly for subsequent Git commands if you don't explicitly pass it to 'run'
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Git User
        run: |
          # Configure Git user for any commits made directly by 'run' commands
          git config user.name "GitHub Actions Bot"
          git config user.email "github-actions-bot@users.noreply.github.com"

      - name: Check and Create 'sit' Branch if it doesn't exist
        id: create_sit_branch # Assign an ID to this step to access its outputs if needed
        run: |
          echo "Attempting to create 'sit' branch if it does not exist..."
          # Fetch all remote branches to ensure we have the most up-to-date information
          git fetch origin

          # Check if the 'sit' branch exists on the remote (origin)
          # 'git rev-parse --verify origin/sit' returns 0 if it exists, non-zero otherwise
          # '&>/dev/null' redirects both stdout and stderr to null, suppressing output
          if ! git rev-parse --verify origin/sit &>/dev/null; then
            echo "::notice title=Branch Creation::'sit' branch does not exist on origin. Creating it from 'dev'..."

            # Create 'sit' branch locally, based on the current state of 'origin/dev'
            # This ensures 'sit' starts with the content of 'dev'
            git branch sit origin/dev

            # Push the newly created local 'sit' branch to the remote 'origin'
            # This makes 'sit' a remote branch available on GitHub
            git push origin sit
            
            echo "::notice title=Branch Created::'sit' branch created successfully."
            echo "sit_branch_created=true" >> $GITHUB_OUTPUT # Set an output variable
          else
            echo "::info title=Branch Exists::'sit' branch already exists on origin. No new branch created."
            echo "sit_branch_created=false" >> $GITHUB_OUTPUT # Set an output variable
          fi
        env:
          # Pass GITHUB_TOKEN as an environment variable for Git commands to authenticate
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create or Update Pull Request
        id: create_pr
        uses: peter-evans/create-pull-request@v6 # Using a widely used action for PR creation
        with:
          token: ${{ secrets.GITHUB_TOKEN }} # The default GitHub token for workflow actions
          commit-message: "Merge changes from dev into sit" # Commit message for the PR's merge commit
          title: "Promote dev to SIT - ${{ github.ref_name }}" # Title of the Pull Request
          body: |
            This is an automated Pull Request to promote changes from the `dev` branch to the `sit` branch.
            Please review the changes and ensure all tests passed in the corresponding CI build on `dev`.
            *Triggered by push to `dev` branch: `${{ github.event.after }}`*
            *View CI build for this commit: [Link to Cloud Build History for `${{ github.event.after }}`](https://console.cloud.google.com/cloud-build/builds;projectId=YOUR_GCP_PROJECT_ID/builds/${{ github.run_id }})* # IMPORTANT: Replace YOUR_GCP_PROJECT_ID with your actual Google Cloud Project ID
          base: sit # The target branch for the PR (ensured to exist by the previous step)
          head: dev # The source branch for the PR
          branch: "chore/auto-pr-dev-to-sit" # Temporary branch created by the action if needed
          labels: "automated, sit-deployment" # Add labels for easier filtering
          # reviewers: "your-team-lead, another-dev" # Optional: add specific reviewers
          # assignees: "your-dev" # Optional: add assignees
          # draft: true # Optional: create as a draft PR initially
          delete-branch: false # Keep the branch for now, if it was created by the action

      - name: PR Created/Updated Info
        if: steps.create_pr.outputs.pull-request-number != ''
        run: |
          echo "Pull Request #${{ steps.create_pr.outputs.pull-request-number }} created/updated at: ${{ steps.create_pr.outputs.pull-request-url }}"

      - name: No new changes
        if: steps.create_pr.outputs.pull-request-number == ''
        run: echo "No new changes from dev to sit. No PR created or updated."
